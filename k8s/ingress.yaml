apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: spring-boot-api-ingress
  namespace: {{NAMESPACE}}
  labels:
    app: spring-boot-api
    component: backend
    environment: {{NAMESPACE}}
  annotations:
    # Ingress class and controller
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/rewrite-target: /
    
    # SSL and TLS configurations
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    
    # Security headers
    nginx.ingress.kubernetes.io/server-snippet: |
      add_header X-Frame-Options DENY;
      add_header X-Content-Type-Options nosniff;
      add_header X-XSS-Protection "1; mode=block";
      add_header Referrer-Policy "strict-origin-when-cross-origin";
      add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline';";
    
    # Rate limiting
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    
    # CORS configuration
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "*"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization"
    nginx.ingress.kubernetes.io/cors-expose-headers: "Content-Length,Content-Range"
    
    # Connection and timeout settings
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    
    # Load balancing
    nginx.ingress.kubernetes.io/upstream-hash-by: "$remote_addr"
    nginx.ingress.kubernetes.io/load-balance: "round_robin"
    
    # Health check configuration
    nginx.ingress.kubernetes.io/health-check-path: "/api/users/health"
    nginx.ingress.kubernetes.io/health-check-interval: "30"
    nginx.ingress.kubernetes.io/health-check-timeout: "5"
    
    # Monitoring
    nginx.ingress.kubernetes.io/enable-modsecurity: "true"
    nginx.ingress.kubernetes.io/enable-owasp-core-rules: "true"
spec:
  tls:
  - hosts:
    - api-{{NAMESPACE}}.yourdomain.com
    - swagger-{{NAMESPACE}}.yourdomain.com
    secretName: spring-boot-api-tls-{{NAMESPACE}}
  rules:
  - host: api-{{NAMESPACE}}.yourdomain.com
    http:
      paths:
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: spring-boot-api
            port:
              number: 8080
      - path: /actuator/health
        pathType: Exact
        backend:
          service:
            name: spring-boot-api
            port:
              number: 8081
  - host: swagger-{{NAMESPACE}}.yourdomain.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: spring-boot-api
            port:
              number: 8080
---
# Alternative Ingress for AWS Application Load Balancer
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: spring-boot-api-alb-ingress
  namespace: {{NAMESPACE}}
  labels:
    app: spring-boot-api
    component: backend
    environment: {{NAMESPACE}}
  annotations:
    # AWS Load Balancer Controller
    kubernetes.io/ingress.class: "alb"
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS": 443}]'
    alb.ingress.kubernetes.io/ssl-redirect: '443'
    
    # Health check
    alb.ingress.kubernetes.io/healthcheck-path: /api/users/health
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: '30'
    alb.ingress.kubernetes.io/healthcheck-timeout-seconds: '5'
    alb.ingress.kubernetes.io/healthy-threshold-count: '2'
    alb.ingress.kubernetes.io/unhealthy-threshold-count: '3'
    
    # SSL Certificate (ACM)
    alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:region:account-id:certificate/certificate-id
    
    # Security groups
    alb.ingress.kubernetes.io/security-groups: sg-xxxxxxxx
    
    # Load balancer attributes
    alb.ingress.kubernetes.io/load-balancer-attributes: |
      idle_timeout.timeout_seconds=60,
      deletion_protection.enabled=true,
      access_logs.s3.enabled=true,
      access_logs.s3.bucket=your-alb-logs-bucket,
      access_logs.s3.prefix=spring-boot-api/{{NAMESPACE}}
spec:
  rules:
  - host: api-{{NAMESPACE}}.yourdomain.com
    http:
      paths:
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: spring-boot-api
            port:
              number: 8080
      - path: /actuator/health
        pathType: Exact
        backend:
          service:
            name: spring-boot-api
            port:
              number: 8081
---
# Network Policy for enhanced security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: spring-boot-api-netpol
  namespace: {{NAMESPACE}}
  labels:
    app: spring-boot-api
spec:
  podSelector:
    matchLabels:
      app: spring-boot-api
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 8080
    - protocol: TCP
      port: 8081
  egress:
  - to: []
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53
  - to: []
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80 